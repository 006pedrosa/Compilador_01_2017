
=============================DEFINIÇÕES===========================
DV - Declaração de Variável
DC - Declaração de COnstantes
CA - Comando de Atribuição
CR - Comando de Repetição
CT - Comando de Teste
CN - Comando Nulo
CL - Comando de Leitura
CE - Comando de Escrita
TIPO - tipos de variáveis 
==================================================================

S -> (34){DECLARACAO}(35)main{COMANDO}end(36)

DECLARACAO -> DV | DC

COMANDO-> CA | CR | CT | CN | CL | CE 

DV -> TIPO id(5)Y [TERMINADO]

DC -> const id(25)=VALOR(31); [TERMINADO]

CA -> id(30)=EXP(26); [TERMINADO]

Y -> =EXP(21)(22)V | (22)V [TERMINADO]

V-> ,(23)id(24)Y | ; [TERMINADO]

TIPO -> integer(1) | byte(2) | string(3) | boolean(4) [TERMINADO]

CR -> (37)while'('EXP')'(27) X(38) [TERMINADO]

X ->  COMANDO | begin {COMANDO} end [TERMINADO]

CT -> if'('EXP')'(27) then CT_A [TERMINADO]

CT_A -> COMANDO (39)[else COMANDO](40)| begin {COMANDO} end (39)[else begin {COMANDO} end](40)[TERMINADO]

CN -> ';'

CL -> readln'('id'(30))'(28);

CE -> write'('EXP(29){,EXP1(29)}')'; | writeln'('EXP(29){,EXP1(29)}')'; 

EXP -> EXPS(18)[(<|>|<=|>=|==|!=)(19)EXPS1(20)] [TERMINADO]

EXPS -> [+|-](14)T(15)(16){(+|-|or(12))T (17)} [TERMINADO]

T -> F(11){(*|/|and (12))F(11)(13)}  [TERMINADO]

F -> "("EXP")"(9) | id(6) | const(7) | not F(10) | true(7) | false(7) [TERMINADO]

VALOR-> const(32) | true(33) | false(33) [TERMINADO]

====================================================================================

	ESQUEMA DE TRADUÇÃO

-------------------------------FUNCAO TIPO -------------------------------
1 ->TIPO.tipo = tipo-inteiro
2-> TIPO.tipo = tipo-byte
3-> TIPO.tipo = tipo-string
4-> TIPO.tipo = tipo-logico
--------------------------------------------------------------------------
				FUNCAO DV
5-> if(id_tipo == "tipo-byte" || id_tipo == "tipo-logico"){
          write(
             byte ?
          ) //dseg file
    } else if(id_tipo == "tipo-inteiro"){
          write(
             sword ?
          ) //dseg file
    } else if(id_tipo == "tipo-string"){
          write(
             byte 256 DUP(?)s
          ) //dseg file
    }

    
==========================================================================
				FUNCAO F
6-> F.end = id.end
7-> F.end = const.end
8-> F.end = const.end
9-> F.end = EXP.end
==========================================================================
				FUNCAO T
10-> if(F.tipo != tipo-logico) erro (tipos incompativeis)
11-> T.end = F.end
12->auxiliarToken = lex
	
13-> if(auxiliarToken == "AND"){
	if(F1.tipo != tipo-logico || F2.tipo != tipo-logico)
		erro(tipos incompativeis)
	else
		mov AL, DS:[T_end]
                mov BL, DS:[F_end]
		and AL, BL
		mov DS:[T_END], AL
		
      }else if (auxiliarToken == "*" || auxiliarToken == "/"){
	  if(F1.tipo != tipo-byte || F1.tipo != tipo-inteiro || F2.tipo != tipo-byte || F2.tipo != tipo-inteiro)
		erro(tipos incompativeis)
	  else{
		if(F1.tipo == tipo-logico || F1.tipo == tipo-string || F2.tipo == tipo-logico || F2.tipo == tipo-string)
			erro(tipos incompativeis)
		else{
			if(auxiliarToken == /)
				T.tipo = "tipo-inteiro"
			else{
				if(F1.tipo == "tipo-byte" && F2.tipo == "tipo-byte")
					mov AX, DS:[T_end]
                                        mov BX, DS:[F_end]
                                        div BX
                                        mov DS:[T_end], BX
				else
					mov AX, DS:[T_end]
                                        mov BX, DS:[F_end]
                                        mul BX
                                        mov DS:[T_end], BX
			}
		}
	  }else{
		T.tipo = F1.tipo
	}
==========================================================================
				FUNCAO EXPS
14-> if(lex == "+" || lex == "-")
	auxiliarToken = "lex"

15-> EXPS.end = T.end
	if(lex == '-'){

	}

16-> if(auxiliarToken == "-"){
		if(EXPS.tipo == "tipo-string" || EXPS.tipo = "tipo-logico" )
			erro(tipos incompativeis)
		else
			mov AX, DS:[EXPS.end]
			mov BX, AX
			sub AX, BX
			sub AX, BX
			mov DS:[EXP.end], AX
     
	}else if (auxiliarToken == "+"){
		if(EXPS.tipo == "tipo-logico")
			erro(tipos incompativeis)
	}
	
17-> if(auxiliarToken == "OR"){
	if(EXPS.tipo != tipo-logico || T1.tipo != tipo-logico)
		erro(tipos incompativeis)
	else{
		mov AL, DS:[EXP.end]
		mov BL, DS:[T1.end]
		or AL, BL
		mov DS:[EXP.end], AL
	}
     }else if(auxiliarToken == "+" || auxiliarToken == "-"){
	if(EXPS.tipo == "tipo-logico" || T1.tipo == "tipo-logico")
		erro(tipos incompativeis)
	  else{
		if(auxiliarToken == "-"){
			if((EXPS.tipo == "tipo-string" || T1.tipo == "tipo-string"))
				erro(tipos incompativeis)
			else
				mov AX, DS:[EXP.end]
				mov BX, DS:[T1.end]
				sub AX, BX
				mov DS:[EXP.end], AX
		}else{
			if(EXPS.tipo == "tipo-string" || T1.tipo == "tipo-string")
				EXPS.tipo = "tipo-string"
				mov DI, EXP.end
				mov SI, T1.end
			RN:
				mov AX, DS[DI]
				cmp AX, $
				je RN+1
				add DI, 1
				jmp RN
			RN+1: 
				mov BX, DS[SI]
				mov DS[DI], BX
				add DI, 1
				add SI, 1
				cmp BX, $
				jne RN+1
				
				mov BX, DS[SI]
				mov DS[DI], BX
						
			else
				EXPS.tipo = "tipo-inteiro"
				mov AX, DS:[EXP.end]
				mov BX, DS:[T1.end]
				add AX, BX
				mov DS:[EXP.end], AX	
		}
	}else{
		EXPS.tipo = T1.tipo
	}
========================================================================
				FUNCAO EXP
18-> EXP.end = EXPS.end

19-> auxiliarToken = lex

20-> if(auxiliarToken == "=="){ //CORRIGIR
		if(EXP.tipo != EXPS1.tipo)
			if(EXP.tipo == "tipo-string" || EXP.tipo == "tipo-logico" || EXPS1.tipo == "tipo-string" || EXPS1.tipo == "tipo-logico")
				erro(tipos incompativeis)
			else
				EXP.end = NTemp;
				mov AX, DS:[EXP.end]
				mov BX, DS:[EXPS.end]
				cmp AX, BX
				je RN
				mov CX, 0
				jmp RN+1
			RN:
				mov CX, 1
			RN+1:
				mov DS:[EXP.end], CX	
		else
			if(EXP.tipo == "tipo-string"){

			}else{
			  	temp.end = NTemp;
				mov DI, EXP.end
				mov SI, EXPS.end
			  RN:
				mov AX, DS:[SI]
				mov BX, DS:[DI]
				cmp AX, BX
				jne RN+1
				cmp AX, $
				je RN
				mov CX, 1
				mov DS:[temp.end]
				jmp RN+2
			RN+1:
				mov CX, 0
				mov DS:[temp.end]
			RN+2:
				
				
			}

    else if(auxiliarToken == "<" || auxiliarToken = ">" || auxiliarToken == "<=" || auxiliarToken == ">=" || auxiliarToken == "!="){
	if(EXP.tipo == "tipo-string" || EXPS1.tipo == "tipo-string")
		erro(tipos incompativeis)
	else
		if(EXP.tipo == EXPS1.tipo)
			EXP.tipo = "tipo-logico"
		else
			if(EXP.tipo == "tipo-string" || EXP.tipo == "tipo-logico" || EXPS1.tipo == "tipo-string" || EXPS1.tipo == "tipo-logico")
				erro(tipos incompativeis)
			else
				if(auxiliarToken == "<"){
					EXP.end = NTemp;
					mov AX, DS:[EXP.end]
					mov BX, DS:[EXPS.end]
					cmp AX, BX
					jl RN
					mov CX, 0
					jmp RN+1
				RN:
					mov CX, 1
				RN+1:
					mov DS:[EXP.end], CX
	
				}else if(auxiliarToken == "<="){
					EXP.end = NTemp;
					mov AX, DS:[EXP.end]
					mov BX, DS:[EXPS.end]
					cmp AX, BX
					jle RN
					mov CX, 0
					jmp RN+1
				RN:
					mov CX, 1
				RN+1:
					mov DS:[EXP.end], CX
				
				}
				}else if(auxiliarToken == ">"){
					EXP.end = NTemp;
					mov AX, DS:[EXP.end]
					mov BX, DS:[EXPS.end]
					cmp AX, BX
					jg RN
					mov CX, 0
					jmp RN+1
				RN:
					mov CX, 1
				RN+1:
					mov DS:[EXP.end], CX
				
				}else if(auxiliarToken == ">="){
					EXP.end = NTemp;
					mov AX, DS:[EXP.end]
					mov BX, DS:[EXPS.end]
					cmp AX, BX
					jge RN
					mov CX, 0
					jmp RN+1
				RN:
					mov CX, 1
				RN+1:
					mov DS:[EXP.end], CX
				
				}else if(auxiliarToken == "!="){
					EXP.end = NTemp;
					mov AX, DS:[EXP.end]
					mov BX, DS:[EXPS.end]
					cmp AX, BX
					jne RN
					mov CX, 0
					jmp RN+1
				RN:
					mov CX, 1
				RN+1:
					mov DS:[EXP.end], CX
				
				}
				EXP.tipo = "tipo-logico"
	}
=================================================================
		                  FUNÇÃO Y
21-> if(Y.tipo != EXP.tipo){
	if(Y.tipo == "tipo-inteiro" || Y.tipo == ""tipo-byte || EXP.tipo == "tipo-inteiro" || EXP.tipo == "tipo-byte"){
              mov AX, DS:[EXP.end]
	      mov DS:[Y.end], AX
        }else{
		ERRO!!	
	}
     }else{
		if(Y.tipo == "tipo-string"){
			mov DI, Y.end
			mov SI, EXP.end
			RN = NRot;
			RN+1 = NRot;
		     RN:
			mov AX, DS:[SI]
			mov DS:[DI], AX
			add DI, 1
			add SI, 1
			cmp AX, $
			je RN+1
			jmp RN
		     RN+1:
		}else{
			mov AX, DS:[EXP.end]
			mov DS:[Y.end], AX
		}
	}	

22-> V.end = Y.end

23-> if(id_tipo == "tipo-byte" || id_tipo == "tipo-logico"){
          write(
             byte ?
          ) //dseg file
    } else if(id_tipo == "tipo-inteiro"){
          write(
             sword ?
          ) //dseg file
    } else if(id_tipo == "tipo-string"){
          write(
             byte 256 DUP(?)s
          ) //dseg file
    }

24-> Y.end = V.end

25-> auxiliarLex = id.lex

26-> if(id.tipo != EXP.tipo)
	if(EXP.tipo == "tipo-string" || EXP.tipo == "tipo-logico" || id.tipo == "tipo-string" || id.tipo == "tipo-logico")
		erro(tipos incompativeis)
	else{
	      mov AX, DS:[EXP.end]
	      mov DS:[CA.end], AX
	}
    }else{

 		if(CA.tipo == "tipo-string"){
			mov DI, Y.end
			mov SI, EXP.end
			RN = NRot;
			RN+1 = NRot;
		     RN:
			mov AX, DS:[SI]
			mov DS:[DI], AX
			add DI, 1
			add SI, 1
			cmp AX, $
			je RN+1
			jmp RN
		     RN+1:
		}else{
			mov AX, DS:[EXP.end]
			mov DS:[Y.end], AX
		}
	}

27-> if(EXP.tipo != "tipo-logico")
	erro(tipos incompativeis)
     else{
		mov AX, DS:[EXP.end]
		cmp AX, 1
		jne RN
	}

28-> 
   mov  DX, buffer_end
   mov  AL, 0FFh
   mov  DS:[buffer_end], AL
   mov  AH, 0Ah
   int  21h
   mov  AH, 02h
   mov  DL, 0Dh
   int  21h
   mov  DL, 0Ah
   int  21h
        
   if(id.tipo != "tipo-string"){
	   mov DI, buffer_end+2
	   mov AX, 0
	   mov CX, 10
	   mov DX, 1
	   mov BH, 0
	   mov BL, DS:[DI]
	   cmp BX, 2Dh
	   jne RN
	   mov DX, -1
	   add DI, -1
	   mov BL, DS:[DI]
	RN:
	   push DX
	   mov DX, 0
	RN+1:
	   cmp BX, 0Dh
	   je RN+2
	   imul CX
	   add BX, -48
	   add AX, BX
	   add DI, 1
	   mov BH, 0
	   mov BL, DS:[DI]
	   jmp RN+1
	RN+2:
	   pop CX
	   imul CX
            
mov DS:[id_end], AX
} else {
	   mov DI, id_end
	   mov SI, "+buffer_end
	RN:
	   mov AX, DS:[SI]
	   mov DS:["+id_end+"], AX
	   add DI, 1
	   add SI, 1
	   cmp AX, $
	   je RN+1
	   jmp RN
	RN+1:
}

29-> 
if(lex == "write){
	mov di, EXP_end
	mov cx, 0
	cmp ax, 0
	jge RN 
	mov bl, 2Dh
	mov ds:[di], bl
	add di, 1
	neg ax
RN:
	mov bx, 10
RN+1:
	add cx, 1
	mov dx, 0
	idiv bx
	push dx
	cmp ax, 0
	jne RN+1

RN+2:
	pop dx
	add dx, 30h;
	mov ds:[di], dl
	add di, 1
	add cx, -1
	cmp cx, 0
	jne RN+2

	mov dl, 024h
	mov ds:[di], dl

	mov dx, EXP_end
	mov ah, 09h
	int 21h

} else if(writeln){

	mov di, EXP_end
	mov cx, 0
	cmp ax, 0
	jge RN 
	mov bl, 2Dh
	mov ds:[di], bl
	add di, 1
	neg ax
RN:
	mov bx, 10
RN+1:
	add cx, 1
	mov dx, 0
	idiv bx
	push dx
	cmp ax, 0
	jne RN+1

RN+2:
	pop dx
	add dx, 30h;
	mov ds:[di], dl
	add di, 1
	add cx, -1
	cmp cx, 0
	jne RN+2

	mov dl, 024h
	mov ds:[di], dl

	mov dx, EXP_end
	mov ah, 09h
	int 21h

	mov dl, 024h 
	mov ds:[di], dl

	mov dx, EXP_end
	mov ah, 09h
	int 21h
}

30->CA_end = getEnd(lex)

31->id.tipo = EXP.tipo

32-> VALOR.tipo = const.tipo

33-> VALOR.tipo = "tipo-logico"

34-> write(
       sseg SEGMENT STACK 
         byte 4000h DUP(?) 
       sseg ENDS
       dseg SEGMENT PUBLIC 
          byte 4000h DUP(?)  
     ) //dseg file

    write(
       cseg SEGMENT PUBLIC 
         ASSUME CS:cseg, DS:dseg
       strt: 
     ) //cseg file

35-> write(
       dseg ENDS  
     ) //dseg file

36-> write(
       cseg ENDS
       END strt 
     ) //cseg file

37-> RN

38->
	mov AX, DS:[EXP_end]
	cmp AX, 1
	jne RN

39->
	jmp RN+1
      RN:

40->
     RN+1: